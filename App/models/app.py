# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N7xVRHuaNrw-rrAf4brV3CeCTnEy39_c
"""

# app/app.py

import os, re, glob, math, json, pickle
from pathlib import Path
import numpy as np
import streamlit as st
import cv2, pywt, tensorflow as tf
from PIL import Image
from skimage.feature import local_binary_pattern as sk_lbp

APP_TITLE = "üîç TraceFinder - Forensic Scanner Identification"
IMG_SIZE = (256, 256)
PATCH = 128
STRIDE = 64
MAX_PATCHES = 16

BASE_DIR = Path(__file__).resolve().parent
ART_SCN = BASE_DIR / "models"
ART_IMG = ART_SCN
ART_PAIR = ART_SCN / "artifacts_tamper_pair"
TAMP_ROOT = ART_SCN / "Tampered images"

# ----------------- STREAMLIT CONFIG -----------------
st.set_page_config(page_title=APP_TITLE, layout="wide")

st.markdown(
    """
    <style>
    /* Background */
    .stApp {
        background: linear-gradient(135deg, #0f2027, #203a43, #2c5364);
        color: #f1f1f1;
        font-family: "Segoe UI", sans-serif;
    }
    h2, h3, h4 {
        color: #f8f9fa !important;
    }
    /* Card styles */
    .result-card {
        padding: 18px;
        border-radius: 12px;
        background: rgba(255,255,255,0.05);
        border: 1px solid rgba(255,255,255,0.2);
        margin-bottom: 16px;
    }
    .highlight {
        font-size: 22px;
        font-weight: 600;
        color: #00e6e6;
    }
    .confidence {
        font-size: 14px;
        color: #ccc;
    }
    /* Image border */
    .img-card {
        padding: 10px;
        background: rgba(255,255,255,0.07);
        border-radius: 10px;
        border: 1px solid rgba(255,255,255,0.2);
    }
    </style>
    """,
    unsafe_allow_html=True
)

st.markdown(f"<h2 style='margin-top:0'>{APP_TITLE}</h2>", unsafe_allow_html=True)

# ----------------- UTIL FUNCTIONS -----------------
def decode_upload_to_bgr(uploaded):
    try: uploaded.seek(0)
    except Exception: pass
    raw = uploaded.read(); name = uploaded.name
    buf = np.frombuffer(raw, np.uint8)
    bgr = cv2.imdecode(buf, cv2.IMREAD_UNCHANGED)
    if bgr is None: raise ValueError("Could not decode file")
    return bgr, name

def load_to_residual_from_bgr(bgr):
    gray = cv2.cvtColor(bgr, cv2.COLOR_BGR2GRAY) if bgr.ndim == 3 else bgr
    gray = cv2.resize(gray, IMG_SIZE, interpolation=cv2.INTER_AREA).astype(np.float32) / 255.0
    cA,(cH,cV,cD)=pywt.dwt2(gray,"haar"); cH.fill(0); cV.fill(0); cD.fill(0)
    den=pywt.idwt2((cA,(cH,cV,cD)),"haar")
    return (gray - den).astype(np.float32)

def safe_show_image(img_bgr, caption="Uploaded Page"):
    rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)
    st.markdown('<div class="img-card">', unsafe_allow_html=True)
    st.image(rgb, caption=caption, use_container_width=True)
    st.markdown('</div>', unsafe_allow_html=True)

# ----------------- MOCK PREDICT (replace with your pipeline) -----------------
def fake_scanner_predict():
    scanners = ["Canon120-1","Canon120-2","Canon220","EpsonV550","HP"]
    s = np.random.choice(scanners)
    return s, np.random.uniform(70,99)

def fake_tamper_detect():
    verdict = np.random.choice(["Tampered","Clean"])
    return verdict, np.random.uniform(0.3,0.9), 0.5, np.random.randint(0,4)

# ----------------- FILE UPLOAD -----------------
uploaded = st.file_uploader(
    "Upload scanned page",
    type=["tif","tiff","png","jpg","jpeg"],
    label_visibility="collapsed"
)

if uploaded:
    try:
        bgr, display_name = decode_upload_to_bgr(uploaded)
        residual = load_to_residual_from_bgr(bgr)

        # Replace with real model
        s_lab, s_conf = fake_scanner_predict()
        verdict, p_img, thr_used, hits = fake_tamper_detect()

        colL, colR = st.columns([1.2, 1.8], gap="large")

        with colR:
            safe_show_image(bgr, caption=display_name)

        with colL:
            st.markdown(
                f"""
                <div class="result-card">
                    <div style='font-size:16px;color:#ddd;'>Scanner</div>
                    <div class="highlight">{s_lab}</div>
                    <div class="confidence">{s_conf:.1f}% confidence</div>
                </div>
                <div class="result-card">
                    <div style='font-size:16px;color:#ddd;'>Tamper Verdict</div>
                    <div class="highlight">{verdict}</div>
                    <div class="confidence">p={p_img:.3f} ¬∑ thr={thr_used:.3f} ¬∑ hits={hits}</div>
                </div>
                """,
                unsafe_allow_html=True
            )
    except Exception as e:
        st.error("‚ùå Inference error")
        st.exception(e)
else:
    st.info("üìÇ Drag-and-drop a TIF/TIFF/PNG/JPG/JPEG to analyze.")